(add-to-list 'load-path "~/emacs/")
(add-to-list 'exec-path "/usr/local/bin")
(add-to-list 'exec-path "~/bin")

(require 'whitespace)
(global-whitespace-mode t)

(require 'moinmoin-mode)

(require 'org-install)

(require 'epa-file)
(epa-file-enable)

(load "~/org/org-init")
(set 'inhibit-startup-screen t)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files (quote ("~/org/linx.org" "~/org/development.org" "~/org/notes.org" "~/org/todo.org")))
 '(whitespace-display-mappings (quote ((space-mark 160 [164] [95]) (tab-mark 9 [187 9] [92 9])))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(setq python-indent-offset 2)

;; Line up closing brackets with the opening line
;; Comes from:
;; http://stackoverflow.com/questions/4293074/in-emacs-python-mode-customize-multi-line-statement-indentation
(defadvice python-calculate-indentation (around outdent-closing-brackets)
  "Handle lines beginning with a closing bracket and indent them so that
they line up with the line containing the corresponding opening bracket."
  (save-excursion
    (beginning-of-line)
    (let ((syntax (syntax-ppss)))
      (if (and (not (eq 'string (syntax-ppss-context syntax)))
               (python-continuation-line-p)
               (cadr syntax)
               (skip-syntax-forward "-")
               (looking-at "\\s)"))
          (progn
            (forward-char 1)
            (ignore-errors (backward-sexp))
            (setq ad-return-value (current-indentation)))
        ad-do-it))))

(ad-activate 'python-calculate-indentation)

;; code checking via flymake
;; set code checker here from "epylint", "pyflakes"
(setq pycodechecker "pyflakes")
(when (load "flymake" t)
  (defun flymake-pycodecheck-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
           (local-file (file-relative-name
                        temp-file
                        (file-name-directory buffer-file-name))))
      (list pycodechecker (list local-file))))
  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pycodecheck-init)))
;; (add-hook 'python-mode-hook
;;     (lambda ()
;;         ; Don't invoke flymake on temporary buffers for the interpreter
;;         (unless (eq buffer-file-name nil) (flymake-mode 1))
;;             (local-set-key [f2] 'flymake-goto-prev-error)
;;             (local-set-key [f3] 'flymake-goto-next-error)
;;             (local-set-key [f4] 'flymake-display-err-menu-for-current-line)
;;         ))

;; Allow hash to be entered on mac keyboard
;; (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
